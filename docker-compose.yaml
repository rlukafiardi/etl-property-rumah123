services:
  # Airflow PostgreSQL Database
  airflow-db:
    container_name: airflow-db
    image: postgres:latest
    environment:
      - POSTGRES_USER=${AIRFLOW_DB_USER}
      - POSTGRES_PASSWORD=${AIRFLOW_DB_PASSWORD}
      - POSTGRES_DB=${AIRFLOW_DB_NAME}
    volumes:
      - airflow-db-data:/var/lib/postgresql/data
    ports:
      - "${AIRFLOW_DB_EXPOSE_PORT}:${AIRFLOW_DB_PORT}"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - etl-network
    restart: unless-stopped

  # Airflow Init Service
  airflow-init:
    container_name: airflow-init
    image: custom-airflow:latest
    depends_on:
      airflow-db:
        condition: service_healthy
    env_file:
      - .env
    command: >
      bash -c "
        airflow db migrate &&
        airflow users create --username ${AIRFLOW_ADMIN_USERNAME} --firstname ${AIRFLOW_ADMIN_FIRSTNAME} --lastname ${AIRFLOW_ADMIN_LASTNAME} --role Admin --email ${AIRFLOW_ADMIN_EMAIL} --password ${AIRFLOW_ADMIN_PASSWORD}
      "
    networks:
      - etl-network
    restart: on-failure

  # Airflow Webserver
  airflow-webserver:
    container_name: airflow-webserver
    build:
      context: .
      dockerfile: Dockerfile
    image: custom-airflow:latest
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    ports:
      - "${AIRFLOW_WEBSERVER_PORT}:8080"
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    command: webserver
    networks:
      - etl-network
    restart: unless-stopped

  # Airflow Scheduler
  airflow-scheduler:
    container_name: airflow-scheduler
    image: custom-airflow:latest
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    command: scheduler
    networks:
      - etl-network
    restart: unless-stopped

  # ETL PostgreSQL Database
  etl-db:
    container_name: etl-db
    image: postgres:latest
    environment:
      - POSTGRES_USER=${ETL_DB_USER}
      - POSTGRES_PASSWORD=${ETL_DB_PASSWORD}
      - POSTGRES_DB=${ETL_DB_NAME}
    volumes:
      - etl-db-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${ETL_DB_EXPOSE_PORT}:${ETL_DB_PORT}"
    networks:
      - etl-network
    restart: unless-stopped

  # PgAdmin for Database Management
  etl-pgadmin:
    container_name: etl-pgadmin
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - etl-db
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - etl-network
    restart: unless-stopped

networks:
  etl-network:
    driver: bridge 

volumes:
  airflow-db-data:
  etl-db-data:
  pgadmin-data: